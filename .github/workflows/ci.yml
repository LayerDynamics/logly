name: CI

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: write

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black isort mypy

      - name: Run black
        run: |
          black --check --diff logly/ tests/ || true

      - name: Run isort
        run: |
          isort --check --diff logly/ tests/ || true

      - name: Run flake8
        run: |
          flake8 logly/ tests/ --max-line-length=120 --extend-ignore=E203,W503 || true

  test:
    name: Test Python ${{ matrix.python-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11']

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install -r requirements/requirements.txt
          pip install -r requirements/requirements-dev.txt

      - name: Install logly
        run: |
          pip install -e .

      - name: Run unit tests
        run: |
          pytest tests/unit/ -v --cov=logly --cov-report=xml --cov-report=term

      - name: Run integration tests
        run: |
          pytest tests/integration/ -v

      - name: Run e2e tests
        run: |
          pytest tests/e2e/ -v

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        if: matrix.python-version == '3.11' && matrix.os == 'ubuntu-latest'
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
        continue-on-error: true

  test-installation:
    name: Test Installation
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Test pip install
        run: |
          pip install .
          logly --help

      - name: Test control script
        run: |
          ./logly.sh help

      - name: Verify package imports
        run: |
          python -c "from logly.collectors import SystemMetricsCollector"
          python -c "from logly.storage import SQLiteStore"
          python -c "from logly.query import QueryBuilder"
          python -c "from logly.core import Config, Scheduler"

  security:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install safety bandit

      - name: Run safety check
        run: |
          pip install -r requirements/requirements.txt
          safety check --json || true

      - name: Run bandit security scan
        run: |
          bandit -r logly/ -f json || true

  build:
    name: Build Distribution
    runs-on: ubuntu-latest
    needs: [test, lint]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel build

      - name: Build distribution
        run: |
          python -m build

      - name: Check distribution
        run: |
          pip install twine
          twine check dist/*

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/
          retention-days: 7

  summary:
    name: CI Summary
    needs: [lint, test, test-installation, security, build]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Check all jobs
        run: |
          echo "## CI Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Lint | ${{ needs.lint.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Test | ${{ needs.test.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Test Installation | ${{ needs.test-installation.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security | ${{ needs.security.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Build | ${{ needs.build.result }} |" >> $GITHUB_STEP_SUMMARY

      - name: Fail if any job failed
        if: |
          needs.lint.result == 'failure' ||
          needs.test.result == 'failure' ||
          needs.test-installation.result == 'failure' ||
          needs.build.result == 'failure'
        run: |
          echo "One or more CI jobs failed"
          exit 1
