name: Build

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop
  workflow_dispatch:

permissions:
  contents: read

jobs:
  build-wheels:
    name: Build Wheels - Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11']

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel build

      - name: Build wheel
        run: |
          python -m build --wheel

      - name: Verify wheel
        run: |
          pip install dist/*.whl
          logly --help
          python -c "import logly; print('Logly installed successfully')"

      - name: Upload wheel
        uses: actions/upload-artifact@v4
        with:
          name: wheel-python${{ matrix.python-version }}
          path: dist/*.whl
          retention-days: 30

  build-sdist:
    name: Build Source Distribution
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel build

      - name: Build source distribution
        run: |
          python -m build --sdist

      - name: Verify sdist
        run: |
          pip install dist/*.tar.gz
          logly --help

      - name: Check MANIFEST
        run: |
          tar -tzf dist/*.tar.gz | head -20
          echo "Checking for required files..."
          tar -tzf dist/*.tar.gz | grep -q "README.md" && echo "[OK] README.md found"
          tar -tzf dist/*.tar.gz | grep -q "LICENSE" && echo "[OK] LICENSE found" || echo "[WARN] LICENSE not found"
          tar -tzf dist/*.tar.gz | grep -q "pyproject.toml" && echo "[OK] pyproject.toml found"
          tar -tzf dist/*.tar.gz | grep -q "setup.py" && echo "[OK] setup.py found"

      - name: Upload sdist
        uses: actions/upload-artifact@v4
        with:
          name: sdist
          path: dist/*.tar.gz
          retention-days: 30

  build-tarballs:
    name: Build Release Tarballs - ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        include:
          - os: ubuntu-latest
            os_name: linux
          - os: macos-latest
            os_name: macos

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements/requirements.txt

      - name: Create release structure
        run: |
          mkdir -p logly-release/logly
          cp -r logly/* logly-release/logly/
          cp -r config logly-release/
          cp -r requirements logly-release/
          cp setup.py pyproject.toml README.md logly-release/
          cp LICENSE logly-release/ 2>/dev/null || true
          cp logly.sh logly-release/
          chmod +x logly-release/logly.sh

      - name: Add Linux-specific files
        if: matrix.os == 'ubuntu-latest'
        run: |
          cp -r systemd logly-release/

      - name: Detect architecture
        id: arch
        run: |
          ARCH=$(uname -m)
          echo "ARCH=$ARCH" >> $GITHUB_OUTPUT
          echo "Detected architecture: $ARCH"

      - name: Create tarball
        run: |
          tar -czf logly-${{ matrix.os_name }}-${{ steps.arch.outputs.ARCH }}.tar.gz -C logly-release .

      - name: Test tarball
        run: |
          mkdir test-extract
          tar -xzf logly-${{ matrix.os_name }}-${{ steps.arch.outputs.ARCH }}.tar.gz -C test-extract
          ls -la test-extract/
          test -f test-extract/logly.sh || exit 1
          test -f test-extract/setup.py || exit 1
          test -f test-extract/pyproject.toml || exit 1
          echo "Tarball structure verified"

      - name: Upload tarball
        uses: actions/upload-artifact@v4
        with:
          name: tarball-${{ matrix.os_name }}-${{ steps.arch.outputs.ARCH }}
          path: logly-${{ matrix.os_name }}-${{ steps.arch.outputs.ARCH }}.tar.gz
          retention-days: 30

  verify-builds:
    name: Verify All Builds
    needs: [build-wheels, build-sdist, build-tarballs]
    runs-on: ubuntu-latest

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: List all artifacts
        run: |
          echo "## Build Artifacts" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Directory Structure:" >> $GITHUB_STEP_SUMMARY
          find artifacts -type f | sort >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

      - name: Calculate checksums
        run: |
          echo "### Checksums (SHA256):" >> $GITHUB_STEP_SUMMARY
          find artifacts -type f \( -name "*.whl" -o -name "*.tar.gz" \) | while read file; do
            sha256sum "$file" >> $GITHUB_STEP_SUMMARY
          done

  notify:
    name: Build Summary
    needs: [build-wheels, build-sdist, build-tarballs, verify-builds]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Build summary
        run: |
          echo "## Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Build Wheels | ${{ needs.build-wheels.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Build Sdist | ${{ needs.build-sdist.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Build Tarballs | ${{ needs.build-tarballs.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Verify Builds | ${{ needs.verify-builds.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Trigger**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
